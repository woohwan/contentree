pipeline {
    agent {
        node { label 'jenkins-agent-podman' }
    }
    environment { 
        APP_PROJECT = 'contentreej';
        APP_NAME = 'contentreej-admin';
        GIT_PROJECT = "mokdong-k8s-soltware-pjt/java-maven-test/contentreej-admin"
    }
    stages {
        stage("Get email") {
            steps {
                withCredentials([string(
                    credentialsId: 'gitlab-admin-token',
                    variable: 'TOKEN')]) 
                    {
                        script {
                            def gitProjectEncoded = GIT_PROJECT.replaceAll("/", "%2F")
                            echo "$gitProjectEncoded"
                            def membersString = sh(returnStdout: true, script: "curl --silent --header 'PRIVATE-TOKEN: $TOKEN' 'https://gitlab.joins.net/api/v4/projects/${gitProjectEncoded}/members/all'")
                            def members = readJSON text: membersString
                            def emailAddresses = []
                            members.each {
                                def userString = sh(returnStdout: true, script: "curl --silent --header 'PRIVATE-TOKEN: $TOKEN' 'https://gitlab.joins.net/api/v4/users/${it.id}'")
                                def user = readJSON text: userString
                                emailAddresses.add(user.email)
                            }
                            RECIPIENTS = emailAddresses.join(",")
                        }
                    }
            }
        }
        stage("Checkout") {
            steps {
                git branch: "develop",
                credentialsId: "joins-gitlab-token",
                url: "https://gitlab.joins.net/mokdong-k8s-soltware-pjt/java-maven-test/contentreej-admin.git"
                
                script {
                    env.GIT_COMMIT_SHORT = sh(returnStdout: true, script: "git rev-parse --short HEAD | tr -d \'\\n\'")
                    env.GIT_AUTHOR_NAME = sh(returnStdout: true, script: "git log -1 --pretty=format:'%an'")
                    env.GIT_AUTHOR_EMAIL = sh(returnStdout: true, script: "git log -1 --pretty=format:'%ae'")
                }
            }
        }
        stage('Build (App, Dockerfile)') {
            steps {
                container('podman') {
                    withCredentials([usernamePassword(
                    credentialsId: 'harbor',
                    usernameVariable: 'USERNAME',
                    passwordVariable: 'PASSWORD')]) {
                        writeFile file: "setting.xml", text: """
<?xml version="1.0" encoding="UTF-8"?>

<settings xmlns="http://maven.apache.org/SETTINGS/1.2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd">
  
  <proxies>
    <proxy>
      <id>proxy</id>
      <active>true</active>
      <protocol>http</protocol>
      <host>10.150.44.249</host>
      <port>3128</port>
      <nonProxyHosts>local.net|some.host.com</nonProxyHosts>
    </proxy>
  </proxies>

  <mirrors>
    <mirror>
      <id>maven-default-http-blocker</id>
      <mirrorOf>external:http:*</mirrorOf>
      <name>Pseudo repository to mirror external repositories initially using HTTP.</name>
      <url>http://0.0.0.0/</url>
      <blocked>true</blocked>
    </mirror>
  </mirrors>
</settings>
                            """

                        sh "pwd"
                        sh "mkdir -p /cache/.maven"
                        sh "ls -al /cache/.maven"
                        
                        //sh "podman build -v /cache/.maven:/root/.m/repository -v /home/jenkins/agent/workspace/contentreej-admin-jty/setting.xml:/usr/share/maven/conf/settings.xml -t dev-mkube-harbor.joins.net/contentreej-admin/contentreej-admin:${GIT_COMMIT_SHORT} -f Dockerfile ."
                        sh "podman build -v /cache/.maven:/root/.m2 -v ${env.WORKSPACE}/setting.xml:/usr/share/maven/conf/settings.xml -t dev-mkube-harbor.joins.net/$APP_PROJECT/$APP_NAME:${GIT_COMMIT_SHORT} -f Dockerfile ."

                        sh "ls -al /cache/.maven"
                    }    
                }
            }
        }
        stage('push harbor') {
            steps {
                container('podman') {
                    withCredentials([usernamePassword(
                    credentialsId: 'harbor',
                    usernameVariable: 'USERNAME',
                    passwordVariable: 'PASSWORD')]) {
                        sh "podman login -u ${USERNAME} -p ${PASSWORD} dev-mkube-harbor.joins.net"
                        sh "podman push dev-mkube-harbor.joins.net/$APP_PROJECT/$APP_NAME:${GIT_COMMIT_SHORT}"
                    }    
                }
            }
        }
        stage("Set Appchart (dockerimage tag)") {
            steps {
                deleteDir()
                
                git branch: "develop",
                credentialsId: "joins-gitlab-token",
                url: "https://gitlab.joins.net/mokdong-k8s-soltware-pjt/java-maven-test/$APP_NAME-appchart.git"
                
                script {
                    values = readYaml file: "values.yaml"
                    values.backend.image.tag = env.GIT_COMMIT_SHORT
                    writeYaml file: "values.yaml", data: values, overwrite: true
                    
                    sh "git config user.name '${env.GIT_AUTHOR_NAME}'"
                    sh "git config user.email '${env.GIT_AUTHOR_EMAIL}'"
                    withCredentials([usernamePassword(
                    credentialsId: 'joins-gitlab-urlencoded',
                    usernameVariable: 'USERNAME',
                    passwordVariable: 'PASSWORD')]) {
                        sh """
                        git add . && \\
                        git commit -m '${env.GIT_COMMIT_SHORT}' && \\
                        git push https://${USERNAME}:${PASSWORD}@gitlab.joins.net/mokdong-k8s-soltware-pjt/java-maven-test/$APP_NAME-appchart HEAD:develop || true
                        """
                        //https://gitlab.joins.net/mokdong-k8s-soltware-pjt/java-maven-test/contentreej-admin-appchart.git
                    }
                }
                
            }
        }
        
    }
    post {
        success {
                    script {
                        def previousResult = currentBuild.getPreviousBuild()?.result
                        if( previousResult != "SUCCESS") {
                            emailext (
                                to: "$RECIPIENTS",
                                subject: "SOLVED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                                body: "Job name: '${env.JOB_NAME}' \nJob number : '${env.BUILD_NUMBER}' \nCheck console output at '${env.BUILD_URL}'")
                        }else {
                            sh "echo Bulld Succeeded"
                        }
                    }
        }
        failure {
            emailext (
                to: "$RECIPIENTS",
                subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: "Job name: '${env.JOB_NAME}' \nJob number : '${env.BUILD_NUMBER}' \nCheck console output at '${env.BUILD_URL}'",
                attachLog: true
                )
        }
    }
}

pipeline {
    agent {
        node { label 'jenkins-agent-podman' }
    }
    environment { 
        IMAGE_REGISTRY = "dev-mkube-harbor.joins.net";
        HARBOR_PROJECT = "spring-petclinic";
        APP_NAME = "spring-petclinic";
        GIT_BRANCH = "healthcheck";
        GIT = "gitlab.joins.net/mokdong-k8s-soltware-pjt/java-maven-test/spring-petclinic";
        GIT_PWD = "mokdong-k8s-soltware-pjt/java-maven-test/spring-petclinic";
        DOCKERFILE_DIR = "Dockerfile"
        GIT_CHART = "gitlab.joins.net/mokdong-k8s-soltware-pjt/java-maven-test/spring-petclinic-appchart";
        GIT_CHART_BRANCH = "develop-healthcheck";

    }
    stages {
        stage("Get git repo user email list") {
            steps {
                echo "====================== stage : Get git repo user email list ======================"
                withCredentials([string(
                    credentialsId: 'gitlab-admin-token',
                    variable: 'TOKEN')]) 
                    {
                        script {
                            def gitProjectEncoded = GIT_PWD.replaceAll("/", "%2F")
                            echo "$gitProjectEncoded"
                            def membersString = sh(returnStdout: true, script: "curl --silent --header 'PRIVATE-TOKEN: $TOKEN' 'https://gitlab.joins.net/api/v4/projects/${gitProjectEncoded}/members/all'")
                            def members = readJSON text: membersString
                        
                            def emailAddresses = []
                            members.each {
                                def userString = sh(returnStdout: true, script: "curl --silent --header 'PRIVATE-TOKEN: $TOKEN' 'https://gitlab.joins.net/api/v4/users/${it.id}'")
                                def user = readJSON text: userString
                                emailAddresses.add(user.email)
                            }
                            RECIPIENTS = emailAddresses.join(",")
                        }
                    }
            }
        }
        stage("Checkout") {
            steps {
                echo "====================================== stage : Checkout ======================================"
                git branch: "${GIT_BRANCH}", // git branch: "main",
                credentialsId: "joins-gitlab-token",
                url : "https://${GIT}" // url: "https://gitlab.joins.net/mokdong-k8s-soltware-pjt/java-maven-test/spring-petclinic.git"
                
                script {
                    env.GIT_COMMIT_SHORT = sh(returnStdout: true, script: "git rev-parse --short HEAD | tr -d \'\\n\'")
                    env.GIT_AUTHOR_NAME = sh(returnStdout: true, script: "git log -1 --pretty=format:'%an'")
                    env.GIT_AUTHOR_EMAIL = sh(returnStdout: true, script: "git log -1 --pretty=format:'%ae'")
                }
            }
        }
        stage('Build (App, Dockerfile)') {
            steps {
                container('podman') {
                    withCredentials([usernamePassword(
                    credentialsId: 'harbor',
                    usernameVariable: 'USERNAME',
                    passwordVariable: 'PASSWORD')]) {
                        // if use proxy, use custom maven settings file
                        writeFile file: "setting.xml", text: """
<?xml version="1.0" encoding="UTF-8"?>

<settings xmlns="http://maven.apache.org/SETTINGS/1.2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd">
  
  <proxies>
    <proxy>
      <id>proxy</id>
      <active>true</active>
      <protocol>http</protocol>
      <host>10.150.44.249</host>
      <port>3128</port>
      <nonProxyHosts>local.net|some.host.com</nonProxyHosts>
    </proxy>
  </proxies>

  <mirrors>
    <mirror>
      <id>maven-default-http-blocker</id>
      <mirrorOf>external:http:*</mirrorOf>
      <name>Pseudo repository to mirror external repositories initially using HTTP.</name>
      <url>http://0.0.0.0/</url>
      <blocked>true</blocked>
    </mirror>
  </mirrors>
</settings>
                            """

                        sh "pwd"

                        // repository cache dir (pvc)
                        sh "mkdir -p /cache/.maven"
                        // sh "ls -al /cache/.maven"
                        
                        //sh "podman build -v /cache/.maven:/root/.m/repository -v /home/jenkins/agent/workspace/contentreej-admin-jty/setting.xml:/usr/share/maven/conf/settings.xml -t dev-mkube-harbor.joins.net/contentreej-admin/contentreej-admin:${GIT_COMMIT_SHORT} -f Dockerfile ."
                        sh "podman build -v /cache/.maven:/root/.m2 -v ${env.WORKSPACE}/setting.xml:/usr/share/maven/conf/settings.xml -t $IMAGE_REGISTRY/$HARBOR_PROJECT/$APP_NAME:${GIT_COMMIT_SHORT} -f $DOCKERFILE_DIR ."

                        // sh "ls -al /cache/.maven"
                    }    
                }
            }
        }
        stage('push harbor') {
            steps {
                echo "====================================== stage : push harbor ======================================"
                container('podman') {
                    withCredentials([usernamePassword(
                    credentialsId: 'harbor',
                    usernameVariable: 'USERNAME',
                    passwordVariable: 'PASSWORD')]) {
                        sh "podman login -u ${USERNAME} -p ${PASSWORD} $IMAGE_REGISTRY" // sh "podman login -u ${USERNAME} -p ${PASSWORD} dev-mkube-harbor.joins.net"
                        sh "podman push $IMAGE_REGISTRY/$HARBOR_PROJECT/$APP_NAME:${GIT_COMMIT_SHORT}" // sh "podman push dev-mkube-harbor.joins.net/java-maven-test/sample-appchart:${GIT_COMMIT_SHORT}"
                    }    
                }
            }
        }
        stage("Set Appchart (update dockerimage tag)") {
            steps {
                echo "====================================== stage : Set Appchart (update dockerimage tag) ======================================"
                deleteDir()
                
                git branch: "${GIT_CHART_BRANCH}",
                credentialsId: "joins-gitlab-token",
                url: "https://${GIT_CHART}"
                
                script {
                    values = readYaml file: "values.yaml"
                    values.backend.image.tag = env.GIT_COMMIT_SHORT
                    writeYaml file: "values.yaml", data: values, overwrite: true
                    
                    sh "git config user.name '${env.GIT_AUTHOR_NAME}'"
                    sh "git config user.email '${env.GIT_AUTHOR_EMAIL}'"
                    withCredentials([usernamePassword(
                    credentialsId: 'joins-gitlab-urlencoded',
                    usernameVariable: 'USERNAME',
                    passwordVariable: 'PASSWORD')]) {
                        sh """
                        git add . && \\
                        git commit -m '${env.GIT_COMMIT_SHORT}' && \\
                        git push https://${USERNAME}:${PASSWORD}@${GIT_CHART} HEAD:${GIT_CHART_BRANCH} || true 
                        """
                        // git push https://${USERNAME}:${PASSWORD}@gitlab.joins.net/mokdong-k8s-soltware-pjt/java-maven-test/sample-appchart HEAD:develop || true
                    }
                }
                
            }
        }
        stage("Finished (check ArgoCD)") {
            steps {
                echo "====================================== stage : Finished (check ArgoCD) ======================================"
                echo "Click URL below and check deploy Pod in Kubernetes"
                echo "Dev mokdong K8s : https://dev-mkube-argocd.joins.net/applications"
                echo "Prod mokdong K8s : https://mkube-argocd.joins.net/applications"
            }
        }
        
    }
    post {
        always {
            script {
                echo 'One way or another, I have finished'
                if (currentBuild.result == 'ABORTED') {
                    echo "Build stop by user:" + env.BUILD_USER_ID
                    emailext (
                        // to: "$RECIPIENTS",
                        to: "park.suyeon@joins.com", // for Test 
                        subject: "mk8s Jenkins build ABORTED: Job '${env.JOB_NAME}'",
                        body: """
Jenkins Job Stoped by ${env.BUILD_USER_ID}
- Job name: ${env.JOB_NAME}
- Job number : ${env.BUILD_NUMBER}

아래 URL에서 Jenkins 배포 실패원인을 확인하세요.
${env.BUILD_URL}/console

또는 첨부파일 (로그) 확인하여 배포실패를 조치하십시요.
                        """,
                        attachLog: true
                    )
                }
            }
        }
        success {
            echo 'I succeeded!'
        }
        unstable {
            echo 'I am unstable :/'
        }
        failure {
            echo 'I failed :('
        }
        changed {
            echo 'Things were different before...'
        }
    }
}
